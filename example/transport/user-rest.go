// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/gofiber/fiber/v2"
	implement "github.com/seniorGolang/tg/v2/example/implement"
)

func (http *httpUser) getUser(ctx context.Context, request requestUserGetUser) (response responseUserGetUser, err error) {

	response.User, err = http.svc.GetUser(ctx, request.Cookie, request.UserAgent)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpUser) serveGetUser(ctx *fiber.Ctx) (err error) {

	var request requestUserGetUser
	ctx.Response().SetStatusCode(204)

	if _userAgent := string(ctx.Request().Header.Peek("User-Agent")); _userAgent != "" {
		var userAgent string
		userAgent = _userAgent
		request.UserAgent = userAgent
	}

	if _cookie := ctx.Cookies("sessionCookie"); _cookie != "" {
		var cookie string
		cookie = _cookie
		request.Cookie = cookie
	}

	var response responseUserGetUser
	if response, err = http.getUser(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
func (http *httpUser) customResponse(ctx context.Context, request requestUserCustomResponse) (response responseUserCustomResponse, err error) {

	err = http.svc.CustomResponse(ctx, request.Arg0, request.Arg1, request.Opts...)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpUser) serveCustomResponse(ctx *fiber.Ctx) (err error) {

	var request requestUserCustomResponse
	if err = ctx.BodyParser(&request); err != nil {
		ctx.Response().SetStatusCode(fiber.StatusBadRequest)
		_, err = ctx.WriteString("request body could not be decoded: " + err.Error())
		return
	}

	return implement.CustomResponseHandler(ctx, http.svc, request.Arg0, request.Arg1, request.Opts...)
}
func (http *httpUser) customHandler(ctx context.Context, request requestUserCustomHandler) (response responseUserCustomHandler, err error) {

	err = http.svc.CustomHandler(ctx, request.Arg0, request.Arg1, request.Opts...)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpUser) serveCustomHandler(ctx *fiber.Ctx) (err error) {

	var request requestUserCustomHandler
	if err = ctx.BodyParser(&request); err != nil {
		ctx.Response().SetStatusCode(fiber.StatusBadRequest)
		_, err = ctx.WriteString("request body could not be decoded: " + err.Error())
		return
	}

	var response responseUserCustomHandler
	if response, err = http.customHandler(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
